- Setup for this project
  . npx create-next-app@latest
    - Project name: portfolio-app-router-3
    - Would you like to use Typescript? Yes
    - Would you like to use ESLint? Yes
    - Would you like to use Tailwind CSS? No
    - Would you like to use `src/` directory? Yes (We did not use this in the prev project)
    - Would you like to use App Router (recommended)? Yes (not sure we use this at the prev project)
    - Would you like to customize the default import alias (@/*)? No

- next folder is like a compiled version of src folder.
  . It is like `build` or `dist`

- New page building
  src --- app
            page.tsx --- localhost:3000/(empty)
            blogs(folder)
              page.tsx --- localhost:3000/blogs/
              summary(folder)
                page.tsx --- localhost:3000/blogs/summary

- Server Side Rendering
  . By default, page is server side rendering.
    
    - Server side rendering(SSR)

      Browser request ----> Server Response for HTML ---> Browser renders HTML
      (So in this case, the server provides the content in HTML)

      The advantage of Server side rendering is:
      we can call easily BE database because the javascript works when it is placed in the server.
      So that we can easily renders HTML manipulated in the server side.

      Also when we call the database in the server, it will not be leaked into the client code
      but into the browser code : ??
      
    
    - Client Side rendering

      Browser request ----> Server Response for Empty HTML and JS file---> Browser renders HTML on the basis of Javascript 

- API Route
  API Route will not render any HTML document, but rather we can make a request
  to the server and we can do some tasks on the server such as db manipulation,
  returning data, processing authentication, etc.

  create a api folder inside app folder.
  api/blogs/route.ts
  api/portfolios/route.ts
  In the browser, localhost:3000/api/blogs or localhost:3000/api/portfolios 
  ****** Do not use localhost:3000/api/blogs/route